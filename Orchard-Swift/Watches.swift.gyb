//
% warning = "This file was automatically generated and should not be edited."
// ${warning}
//
//  iPhones.swift
//  Orchard
//
//  Created by Jeff Kelley on 7/16/18.
//

import Foundation

#if os(watchOS)

% import sys
% sys.path.insert(0, '../Common')
% from GYBUtilities import ( OSFamily, canSupport, enumName )
% import csv
% def swiftString(x): return "\"" + x + "\""
public enum Watches {

% with open('../Data/Watches.tsv') as file:
    % for row in csv.DictReader(file, delimiter='\t'):
%{
name = row["Name"]
size = row["Size"]
released = row["Released"]
deprecated = row["Deprecated"]
enum_name = enumName(name) + "_" + size
}%
        % if name and released and deprecated:
    @available (watchOS, introduced: ${released}, deprecated: ${deprecated})
    case ${enum_name}
        % elif name and released:
    @available (watchOS, introduced: ${released})
    case ${enum_name}
        % end

    % end
% end
    case unknown

    internal init(model: String) {
        self = .unknown

        switch model {
% with open('../Data/Watches.tsv') as file:
    % for row in csv.DictReader(file, delimiter='\t'):
%{
name = row["Name"]
size = row["Size"]
released = row["Released"]
codes = list(map(swiftString, row["Codes"].split(";")))
deprecated = row["Deprecated"]
enum_name = enumName(name) + "_" + size
}%
        % if name and released and deprecated:
            % if not canSupport(deprecated, OSFamily.WATCHOS):
//        case ${", ".join(codes)}:
//            self = .${enum_name}
//
            % else:
        case ${", ".join(codes)}:
                % if canSupport(released, OSFamily.WATCHOS):
            if #available(watchOS ${released}, *) {
                self = .${enum_name}
            }
                % else:
            self = .${enum_name}
                %end

            %end
        %elif name and released:
        case ${", ".join(codes)}:
            % if canSupport(released, OSFamily.WATCHOS):
            if #available(watchOS ${released}, *) {
                self = .${enum_name}
            }
            % else:
            self = .${enum_name}
            %end

        %end
    %end
%end
        default: break

        }
    }

    public var marketingName: String? {
        switch self {
% with open('../Data/Watches.tsv') as file:
    % for row in csv.DictReader(file, delimiter='\t'):
%{
name = row["Name"]
size = row["Size"]
enum_name = enumName(name) + "_" + size
}%
        case .${enum_name}: return "${name}"
    % end
% end

        default: return nil
        }
    }
}

#endif
