//
% warning = "This file was automatically generated and should not be edited."
// ${warning}
//
//  OrchardwatchOSDevice.h
//  Orchard
//
//  Created by Jeff Kelley on 7/17/18.
//

#import <Foundation/Foundation.h>

#if TARGET_OS_WATCH

#import <WatchKit/WatchKit.h>

NS_ASSUME_NONNULL_BEGIN

% import sys
% sys.path.insert(0, '../../Common')
% from GYBUtilities import ( watchOSDeviceFamily, enumName, longestEnumNameLength, versiontupleAdd, versiontupleToString )
% import csv
typedef NS_ENUM(NSUInteger, OrchardwatchOSDevice) {

% enumNameLength = longestEnumNameLength(watchOSDeviceFamily.WATCH) + len("OrchardwatchOSDevice")
% with open('../../Data/Watches.tsv') as file:
    % for row in csv.DictReader(file, delimiter='\t'):
%{
name = row["Name"]
size = row["Size"]
releasedStr = row["Released"]
deprecatedStr = row["Deprecated"]
released = versiontupleToString(versiontupleAdd(releasedStr, "7.0"))

if deprecatedStr:
    deprecated = versiontupleToString(versiontupleAdd(deprecatedStr, "7.0"))
else:
    deprecated = None

enum_name = enumName(name) + "_" + size
formatted_enum_name = '{:{width}s}'.format("OrchardwatchOSDevice" + enum_name, width=enumNameLength + 5)

if name and released and deprecated:
    formatted_availability = '{:34s}'.format("NS_ENUM_DEPRECATED_IOS(" + released + ", " + deprecated + ")")
elif name and released:
    formatted_availability = '{:34s}'.format("NS_ENUM_AVAILABLE_IOS(" + released + ")")
}%
    ${formatted_enum_name} ${formatted_availability} NS_SWIFT_NAME(${enum_name}),
    % end
%end

    OrchardwatchOSDeviceSimulator NS_SWIFT_NAME(simulator),
    OrchardwatchOSDeviceUnknown   NS_SWIFT_NAME(unknown)

} NS_SWIFT_NAME(watchOSDevice);

@interface WKInterfaceDevice (Orchard)

- (OrchardwatchOSDevice)orchardwatchOSDevice;

@end

OrchardwatchOSDevice OrchardwatchOSDeviceFromNSString(NSString *string) NS_SWIFT_NAME(watchOSDevice(from:));
NSString * _Nullable OrchardMarketingNameForWatchOSDevice(OrchardwatchOSDevice device) NS_SWIFT_NAME(marketingName(for:));

NS_ASSUME_NONNULL_END

#endif
